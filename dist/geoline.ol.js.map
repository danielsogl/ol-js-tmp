{"version":3,"file":"geoline.ol.js","sources":["../src/geoline.ol.js"],"sourcesContent":["/**\n *\tversion\t\t\t@version@\n */\n/**\n *\t@method\t\t\tstma_openlayers\n *\t@description\tMomentan ist OpenLayers 6.3.1 eingebunden.\n *\n *\t@returns\t\t{null} -\n *\n *\t@since\t\t\tv0.0\n */\n/**\n *\tversion\t\t\t@version@\n */\n/**\n *\t@method\t\t\tstma_openlayers\n *\t@description\tMomentan ist OpenLayers 6.3.1 eingebunden.\n *\n *\t@returns\t\t{null} -\n *\n *\t@since\t\t\tv0.0\n */\nexport class stma_openlayers {\n  constructor() {\n    // ----------------------------------------------------------------------------------\n    // Intern\n    // ----------------------------------------------------------------------------------\n    var projection = null;\n    var map = null;\n    var viewParams = null;\n\n    var config = null;\n\n    var tileLoadFunction = null;\n\n    //\t@description\tholt die Konfiguration in Abhängigkeit des EPSG-Codes von unserem Internetserver ab.\n    //\n    //\t@since\t\t\tv0.0\n    var _getConfig = function () {\n      var _self = this;\n      if (config == null) {\n        $.ajax({\n          method: 'POST',\n          url: 'https://gis5.stuttgart.de/geoline/geoline.config/config.aspx',\n          data: {\n            v: '@version@',\n            epsg: projection,\n            url: location.href,\n          },\n          dataType: 'json',\n          async: false,\n          cache: false,\n          success: function (_data) {\n            _data.ags_hosts = $.map(_data.ags_services, function (item) {\n              return item.ags_host;\n            });\n\n            config = _data;\n          },\n          error: function (xhr, status) {\n            console.error('OHOH', xhr, status);\n          },\n        });\n      }\n      return config;\n    };\n\n    //\t@description\tfügt einen EsriLayer hinzu. (gecacht + dynamisch)\n    //\n    //\t@argument\t\t_url {String}\n    //\t\t\t\t\tURL zum AGS-Dienst\n    //\n    //\t@argument\t\t_layerParams {object}\n    //\t\t\t\t\tzusätzliche Parameter für das OpenLayer-Layer-Objekt\n    //\t\t\t\t\tSiehe https://openlayers.org/en/v6.3.1/apidoc/module-ol_layer_Layer-Layer.html\n    //\n    //\t@argument\t\t_sourceParams {object}\n    //\t\t\t\t\tzusätzliche Parameter für das OpenLayer-Source-Objekt\n    //\t\t\t\t\tSiehe https://openlayers.org/en/v6.3.1/apidoc/module-ol_source_Source-Source.html\n    //\n    //\t@argument\t\t_callbackFunction {function}\n    //\t\t\t\t\tMöglichkeit, eine Funktion zu übergeben, die nach dem Hinzufügen des Layers ausgeführt wird.\n    //\t\t\t\t\tDer Funktion wird das jeweilige Layerobjekt übergeben.\n    //\n    //\t@since\t\t\tv0.0\n    var _addEsriLayer = function (\n      _url,\n      _layerParams,\n      _sourceParams,\n      _callbackFunction\n    ) {\n      var _self = this;\n\n      //Infos zu dem AGS Kartendienst ermitteln\n      $.ajax({\n        url: _url + '?f=json',\n        type: 'POST',\n        dataType: 'jsonp',\n        success: function (ags_info) {\n          //console.info(_url, ags_info);\n          try {\n            if (typeof ags_info.error != 'undefined') {\n              console.warn(\n                'Eigenschaften des Kartendienstes ' +\n                  _url +\n                  ' konnten nicht abgerufen werden.',\n                ags_info.error\n              );\n              return;\n            }\n\n            //Copyright\n            var url = new URL(_url);\n            if (jQuery.inArray(url.hostname, _getConfig().ags_hosts) > -1) {\n              if (\n                ags_info.copyrightText == null ||\n                ags_info.copyrightText.length == 0\n              ) {\n                ags_info.copyrightText = '© Stadtmessungsamt, LHS Stuttgart';\n              }\n            }\n\n            //AGS Kartendienst von Esri?\n            if (\n              url.hostname.indexOf('arcgisonline.com') > -1 ||\n              url.hostname.indexOf('arcgis.com') > -1\n            ) {\n              //Der Copyright-Vermerk muss immer sichtbar sein\n              var _attributionControl = $.grep(\n                map.getControls().getArray(),\n                function (_control, i) {\n                  return ol.control.Attribution.prototype.isPrototypeOf(\n                    _control\n                  );\n                }\n              )[0];\n              _attributionControl.setCollapsible(false);\n              _attributionControl.setCollapsed(false);\n            }\n\n            //spatialReference korrigieren für 10.0\n            if (\n              ags_info.currentVersion == 10.05 &&\n              ags_info.spatialReference.latestWkid == null\n            ) {\n              switch (ags_info.spatialReference.wkid) {\n                case 102100:\n                  ags_info.spatialReference.latestWkid = 3857;\n                  break;\n              }\n            }\n\n            //spatialReference überprüfen\n            if (\n              projection != 'EPSG:' + ags_info.spatialReference.wkid &&\n              projection != 'EPSG:' + ags_info.spatialReference.latestWkid\n            ) {\n              console.warn(\n                'Projektion der Karte und des Kartendienstes stimmen nicht überein. Karte: ' +\n                  projection +\n                  ', Kartendienst: EPSG:',\n                ags_info.spatialReference.wkid +\n                  ' / EPSG:' +\n                  ags_info.spatialReference.latestWkid,\n                _url\n              );\n            }\n\n            //Ist es ein gecachter Dienst?\n            if (ags_info.singleFusedMapCache == true) {\n              //-> gecachter Dienst hinzufügen\n              _initCachedLayer(\n                _url,\n                _layerParams,\n                _sourceParams,\n                ags_info,\n                _callbackFunction\n              );\n            } else {\n              //-> dynamischer Dienst hinzufügen\n              _initDynamicLayer(\n                _url,\n                _layerParams,\n                _sourceParams,\n                ags_info,\n                _callbackFunction\n              );\n            }\n          } catch (e) {\n            console.error('Fehler beim Initalisieren des Layers ' + _url, e);\n          }\n        },\n        error: function (xhr, status) {\n          console.error('OHOH', xhr, status);\n        },\n      });\n    };\n\n    //\t@description\tfügt einen EsriLayer hinzu. (gecacht)\n    //\n    //\t@argument\t\t_url {String}\n    //\t\t\t\t\tURL zum AGS-Dienst\n    //\n    //\t@argument\t\t_layerParams {object}\n    //\t\t\t\t\tzusätzliche Parameter für das OpenLayer-Layer-Objekt\n    //\t\t\t\t\tSiehe https://openlayers.org/en/v6.3.1/apidoc/module-ol_layer_Layer-Layer.html\n    //\n    //\t@argument\t\t_sourceParams {object}\n    //\t\t\t\t\tzusätzliche Parameter für das OpenLayer-Source-Objekt\n    //\t\t\t\t\tSiehe https://openlayers.org/en/v6.3.1/apidoc/module-ol_source_Source-Source.html\n    //\n    //\t@argument\t\tags_info {object}\n    //\t\t\t\t\tJSON-Objekt mit den Karteneigenschaften (von ../MapServer?f=json)\n    //\n    //\t@argument\t\t_callbackFunction {function}\n    //\t\t\t\t\tMöglichkeit, eine Funktion zu übergeben, die nach dem Hinzufügen des Layers ausgeführt wird.\n    //\t\t\t\t\tDer Funktion wird das jeweilige Layerobjekt übergeben.\n    //\n    //\t@since\t\t\tv0.0\n    var _initCachedLayer = function (\n      _url,\n      _layerParams,\n      _sourceParams,\n      ags_info,\n      _callbackFunction\n    ) {\n      var _self = this;\n\n      var resolutions = [];\n      $.each(ags_info.tileInfo.lods, function (i, lod) {\n        resolutions.push(lod.resolution);\n      });\n\n      var params = {\n        origin: [ags_info.tileInfo.origin.x, ags_info.tileInfo.origin.y],\n        extent: [\n          ags_info.fullExtent.xmin,\n          ags_info.fullExtent.ymin,\n          ags_info.fullExtent.xmax,\n          ags_info.fullExtent.ymax,\n        ],\n        minZoom: 0,\n        resolutions: resolutions,\n        tileSize: [ags_info.tileInfo.rows, ags_info.tileInfo.cols],\n      };\n      var tileGrid = new ol.tilegrid.TileGrid(params);\n\n      //View konfigurieren, falls diese noch nicht konfiguriert wurde\n      if (map.getView().getProjection().getCode() != projection) {\n        $.extend(true, viewParams, { resolutions: resolutions });\n        map.setView(new ol.View(viewParams));\n      }\n\n      //Projektion ermitteln\n      var projection;\n      if (ags_info.spatialReference.latestWkid != null) {\n        projection = ags_info.spatialReference.latestWkid;\n      } else {\n        projection = ags_info.spatialReference.wkid;\n      }\n\n      //sourceParams\n      var sourceParams = {\n        minZoom: '0',\n      };\n\n      //ToDo: XYZ-Dienst vorsehen? Anderer Server + Instanz?\n      //diese Parameter können nicht überdefiniert werden.\n      var predefinedSourceParams = {\n        tileGrid: tileGrid,\n        projection: ol.proj.get('EPSG:' + projection),\n        attributions: ags_info.copyrightText,\n        url: _url + '/tile/{z}/{y}/{x}',\n      };\n\n      if (tileLoadFunction != null) {\n        predefinedSourceParams.tileLoadFunction = tileLoadFunction;\n      }\n      $.extend(true, sourceParams, _sourceParams, predefinedSourceParams);\n\n      var _zIndex = 10;\n      var url = new URL(_url);\n      if (jQuery.inArray(url.hostname, _getConfig().ags_hosts) > -1) {\n        _zIndex = 20;\n      }\n\n      //layerParams\n      var layerParams = {\n        zIndex: _zIndex,\n      };\n\n      //diese Parameter können nicht überdefiniert werden.\n      var predefinedLayerParams = {\n        source: new ol.source.XYZ(sourceParams),\n      };\n      $.extend(true, layerParams, _layerParams, predefinedLayerParams);\n\n      //gecachten Layer erstellen\n      var layer = new ol.layer.Tile(layerParams);\n\n      //Layer hinzufügen\n      map.addLayer(layer);\n\n      //Callbackfunktion ausführen\n      if (typeof _callbackFunction == 'function') {\n        _callbackFunction(layer);\n      }\n    };\n\n    //\t@description\tfügt einen EsriLayer hinzu. (dynamisch)\n    //\n    //\t@argument\t\t_url {String}\n    //\t\t\t\t\tURL zum AGS-Dienst\n    //\n    //\t@argument\t\t_layerParams {object}\n    //\t\t\t\t\tzusätzliche Parameter für das OpenLayer-Layer-Objekt\n    //\t\t\t\t\tSiehe https://openlayers.org/en/v6.3.1/apidoc/module-ol_layer_Layer-Layer.html\n    //\n    //\t@argument\t\t_sourceParams {object}\n    //\t\t\t\t\tzusätzliche Parameter für das OpenLayer-Source-Objekt\n    //\t\t\t\t\tSiehe https://openlayers.org/en/v6.3.1/apidoc/module-ol_source_Source-Source.html\n    //\n    //\t@argument\t\tags_info {object}\n    //\t\t\t\t\tJSON-Objekt mit den Karteneigenschaften (von ../MapServer?f=json)\n    //\n    //\t@argument\t\t_callbackFunction {function}\n    //\t\t\t\t\tMöglichkeit, eine Funktion zu übergeben, die nach dem Hinzufügen des Layers ausgeführt wird.\n    //\t\t\t\t\tDer Funktion wird das jeweilige Layerobjekt übergeben.\n    //\n    //\t@since\t\t\tv0.0\n    var _initDynamicLayer = function (\n      _url,\n      _layerParams,\n      _sourceParams,\n      ags_info,\n      _callbackFunction\n    ) {\n      var _self = this;\n\n      //sourceParams\n      var sourceParams = {\n        params: { layers: 'show:0' },\n      };\n\n      //diese Parameter können nicht überdefiniert werden.\n      var predefinedSourceParams = {\n        ratio: 1,\n        url: _url,\n        attributions: [\n          new ol.Attribution({\n            html: ags_info.copyrightText,\n          }),\n        ],\n      };\n      $.extend(true, sourceParams, _sourceParams, predefinedSourceParams);\n\n      //layerParams\n      var _zIndex = 40;\n      var url = new URL(_url);\n      if (jQuery.inArray(url.hostname, _getConfig().ags_hosts) > -1) {\n        _zIndex = 50;\n      }\n\n      //layerParams\n      var layerParams = {\n        zIndex: _zIndex, //damit liegen die dynamischen Dienste über den gecachten Diensten (wenn nicht überkonfiguriert wird)\n      };\n\n      //diese Parameter können nicht überdefiniert werden.\n      var predefinedLayerParams = {\n        source: new ol.source.ImageArcGISRest(sourceParams),\n      };\n      $.extend(true, layerParams, _layerParams, predefinedLayerParams);\n\n      //dynamischen Layer erstellen\n      var layer = new ol.layer.Image(layerParams);\n      //Layer hinzufügen\n      map.addLayer(layer);\n\n      //Callbackfunktion ausführen\n      if (typeof _callbackFunction == 'function') {\n        _callbackFunction(layer);\n      }\n    };\n\n    // ----------------------------------------------------------------------------------\n    // Public\n    // ----------------------------------------------------------------------------------\n    /**\n         *\t@method\t\t\tinitMap\n         *\t@description\tinitialisiert die Karte\n         *\t\t\t\t\tBeispiel:\n         *\t\t\t\t\tmymap = new stma_openlayers();\n         *\t\t\t\t\tmymap.initMap(25832, {}, {});\n         *\n         *\t@argument\t\t_epsgCode {int} EPSG-Code des Koordinatensystems.\n         *\t\t\t\t\tUnterstütze Werte sind: 25832, 3857\n                            Siehe auch: http://epsg.io/25832, http://epsg.io/3857\n         *\n         *\t@argument\t\t_mapParams {object}\n         *\t\t\t\t\tzusätzliche Parameter für das OpenLayer-Map-Objekt\n         *\t\t\t\t\tSiehe https://openlayers.org/en/v6.3.1/apidoc/module-ol_Map-Map.html\n         *\n         *\t@argument\t\t_viewParams {object}\n         *\t\t\t\t\tzusätzliche Parameter für das OpenLayer-View-Objekt\n         *\t\t\t\t\tSiehe https://openlayers.org/en/v6.3.1/apidoc/module-ol_View-View.html\n         *\n         *\t@argument\t\t_customParams {object}\n         *\t\t\t\t\tzusätzliche Parameter für geoline.ol.js\n         *\t\t\t\t\tUnterstützte Parameter:\n         *\t\t\t\t\t-tileLoadFunction: Optionale Funktion, die bei gecachten Kartendiensten ausgeführt wird, um eine Kachel zu laden.\n         *\t\t\t\t\t\tBeispiel: { tileLoadFunction: function(imageTile, src) { imageTile.getImage().src = src;}}\n         *\t\t\t\t\t\tSiehe https://openlayers.org/en/v6.3.1/apidoc/module-ol_source_XYZ-XYZ.html\n         *\n         *\t\t\t\t\t-config: Hier kann das Konfigurationsobjekt, das normalerweise direkt vom Server des Stadtmessungsamtes geladen wird überschrieben werden.\n         *\t\t\t\t\t\tDiese Funktion sollte nur sparsam genutzt werden, zum Beispiel für die Offlineverfügbarkeit in Apps.\n         *\t\t\t\t\t\tWird diese Funktion verwendet, so muss sichergestellt werden, dass die übergebene Konfiguration aktuell ist.\n         *\n         *\t@returns\t\t{null} -\n         *\n         *\t@since\t\t\tv0.0\n         */\n    this.initMap = function (\n      _epsgCode,\n      _mapParams,\n      _viewParams,\n      _customParams\n    ) {\n      var _self = this;\n\n      //(25832)UTM-Projektion zu den Projektionen von OpenLayers hinzufügen\n      ol.proj.addProjection(\n        new ol.proj.Projection({\n          code: 'EPSG:25832',\n          units: 'm',\n        })\n      );\n\n      //(31467)GK-Projektion zu den Projektionen von OpenLayers hinzufügen\n      ol.proj.addProjection(\n        new ol.proj.Projection({\n          code: 'EPSG:31467',\n          units: 'm',\n        })\n      );\n\n      //Projektion definieren\n      projection = 'EPSG:' + _epsgCode;\n      if (ol.proj.get(projection) == null) {\n        console.error(\n          'Projektion ' +\n            projection +\n            ' nicht gefunden. Es kann zu falscher Darstellung der Karte kommen'\n        );\n      }\n\n      //zusätzliche Parameter für geoline.ol.js hinzufügen\n      if (_customParams != null && _customParams.tileLoadFunction != null) {\n        tileLoadFunction = _customParams.tileLoadFunction;\n      }\n      if (_customParams != null && _customParams.config != null) {\n        console.warn(\n          'Konfiguration wurde manuell gesetzt und wird nicht vom Server des Stadtmessungamtes geladen. Bitte stellen Sie sicher, dass die Konfiguration immer aktuell ist.'\n        );\n        config = _customParams.config;\n      }\n\n      //Karte initialisieren\n      var mapParams = {\n        target: 'map',\n        controls: ol.control.defaults({\n          attribution: true,\n          attributionOptions: {\n            tipLabel: 'Copyright',\n          },\n        }),\n      };\n\n      //diese Parameter können nicht überdefiniert werden.\n      //Sie dürfen nicht geändert werden, da es sonst ggf. zu Problemen bei der Darstellung der Stadtmessungsamt-Kartendienste kommen kann.\n      var predefinedMapParams = {\n        logo: false,\n        pixelRatio: 1,\n        loadTilesWhileAnimating: true,\n        loadTilesWhileInteracting: true, //Kacheln während des Panens nachladen\n      };\n      $.extend(true, mapParams, _mapParams, predefinedMapParams);\n\n      //Sicherstellen, dass der Attribution-Control vorhanden ist.\n      //Dieser muss vorhanden sein, wenn Karten von ESRI genutzt werden.\n      if (mapParams.controls != null) {\n        var _attributionControlAvailable = false;\n        mapParams.controls.forEach(function (_control, i) {\n          if (ol.control.Attribution.prototype.isPrototypeOf(_control)) {\n            _attributionControlAvailable = true;\n          }\n        });\n        if (_attributionControlAvailable == false) {\n          //Attribution-Control hinzufügen\n          mapParams.controls.push(\n            new ol.control.Attribution({\n              tipLabel: 'Copyright',\n            })\n          );\n        }\n      }\n\n      //View definieren\n      viewParams = $.extend(\n        true,\n        {},\n        {\n          center: [513785, 5402232],\n          zoom: 2,\n        },\n        _viewParams,\n        {\n          projection: ol.proj.get(projection),\n        }\n      );\n\n      //Karte definieren\n      map = new ol.Map(mapParams);\n\n      //Rechtsklick auf der Karte unterbinden\n      $('.ol-viewport').on('contextmenu', function (e) {\n        e.preventDefault();\n      });\n\n      //Nach dem Start die Größe der Karte automatisch bestimmen\n      map.updateSize();\n    };\n\n    /**\n     *\t@method\t\t\taddEsriLayer\n     *\t@description\tfügt einen Kartendienst eines ArcGIS Servers (dynamisch / gecacht) hinzu.\n     *\t\t\t\t\tWenn nichts anderes angegeben ist, dann gelten folgende zIndexe für die Kartendienste:\n     *\t\t\t\t\t10:\tgecacht\n     *\t\t\t\t\t20: gecacht - Kartendienst des Stadtmessungsamtes\n     *\t\t\t\t\t40: dynamisch\n     *\t\t\t\t\t50: dynamisch - Kartendienst des Stadtmessungsamtes\n     *\n     *\t\t\t\t\tBeispiel:\n     *\t\t\t\t\tmymap.addEsriLayer(\"https://server.arcgisonline.com/arcgis/rest/services/World_Topo_Map/MapServer\");\n     *\n     *\t@argument\t\t_url {String} URL des Kartendienstes\n     *\t\t\t\t\tKartendienste des Stadtmessungsamtes sollten über die Funktion addStmaEsriLayer hinzugefügt werden.\n     *\n     *\t@argument\t\t_layerParams {object}\n     *\t\t\t\t\tzusätzliche Parameter für das OpenLayer-Layer-Objekt\n     *\t\t\t\t\tSiehe https://openlayers.org/en/v6.3.1/apidoc/module-ol_layer_Layer-Layer.html\n     *\n     *\t@argument\t\t_sourceParams {object}\n     *\t\t\t\t\tzusätzliche Parameter für das OpenLayer-Source-Objekt\n     *\t\t\t\t\tSiehe https://openlayers.org/en/v6.3.1/apidoc/module-ol_source_Source-Source.html\n     *\n     *\t@argument\t\t_callbackFunction {function}\n     *\t\t\t\t\tMöglichkeit, eine Funktion zu übergeben, die nach dem Hinzufügen des Layers ausgeführt wird.\n     *\t\t\t\t\tDer Funktion wird das jeweilige Layerobjekt übergeben.\n     *\n     *\t@returns\t\t{null} -\n     *\n     *\t@since\t\t\tv0.0\n     */\n    this.addEsriLayer = function (\n      _url,\n      _layerParams,\n      _sourceParams,\n      _callbackFunction\n    ) {\n      var _self = this;\n\n      var url = new URL(_url);\n      if (jQuery.inArray(url.hostname, _getConfig().ags_hosts) > -1) {\n        console.error(\n          'Kartendienste des Stadtmessungsamtes über die Methode addStmaEsriLayer hinzufügen'\n        );\n      } else {\n        _addEsriLayer(_url, _layerParams, _sourceParams, _callbackFunction);\n      }\n    };\n\n    /**\n     *\t@method\t\t\taddStmaEsriLayer\n     *\t@description\tfügt einen Kartendienst eines ArcGIS Servers (dynamisch / gecacht) des Stadtmessungsamtes hinzu.\n     *\t\t\t\t\tWenn nichts anderes angegeben ist, dann gelten folgende zIndexe für die Kartendienste:\n     *\t\t\t\t\t10:\tgecacht\n     *\t\t\t\t\t20: gecacht - Kartendienst des Stadtmessungsamtes\n     *\t\t\t\t\t40: dynamisch\n     *\t\t\t\t\t50: dynamisch - Kartendienst des Stadtmessungsamtes\n     *\n     *\t\t\t\t\tBeispiel:\n     *\t\t\t\t\tmymap.addStmaEsriLayer(\"1_Base/Stadtkarte_Internet_c\");\n     *\n     *\t@argument\t\t_mapservice {String} Bezeichnung des Kartendienstes\n     *\t\t\t\t\tWenn die URL des Kartendienstes beispielsweise https://SERVER/ArcGIS/rest/services/ORDNER/KARTENDIENST/MapServer heißt,\n     *\t\t\t\t\tso sollte ORDNER/KARTENDIENST angegeben werden.\n     *\n     *\t@argument\t\t_layerParams {object}\n     *\t\t\t\t\tzusätzliche Parameter für das OpenLayer-Layer-Objekt\n     *\t\t\t\t\tSiehe https://openlayers.org/en/v6.3.1/apidoc/module-ol_layer_Layer-Layer.html\n     *\n     *\t@argument\t\t_sourceParams {object}\n     *\t\t\t\t\tzusätzliche Parameter für das OpenLayer-Source-Objekt\n     *\t\t\t\t\tSiehe https://openlayers.org/en/v6.3.1/apidoc/module-ol_source_Source-Source.html\n     *\n     *\t@argument\t\t_callbackFunction {function}\n     *\t\t\t\t\tMöglichkeit, eine Funktion zu übergeben, die nach dem Hinzufügen des Layers ausgeführt wird.\n     *\t\t\t\t\tDer Funktion wird das jeweilige Layerobjekt übergeben.\n     *\n     *\t@returns\t\t{null} -\n     *\n     *\t@since\t\t\tv0.0\n     */\n    this.addStmaEsriLayer = function (\n      _mapservice,\n      _layerParams,\n      _sourceParams,\n      _callbackFunction\n    ) {\n      var _self = this;\n\n      _addEsriLayer(\n        'https://' +\n          _getConfig().ags_host +\n          '/' +\n          _getConfig().ags_instance +\n          '/rest/services/' +\n          _mapservice +\n          '/MapServer',\n        _layerParams,\n        _sourceParams,\n        _callbackFunction\n      );\n    };\n\n    /**\n     *\t@method\t\t\taddStmaBaseLayer\n     *\t@description\tfügt einen Basis-Kartendienst (dynamisch / gecacht) des Stadtmessungsamtes hinzu.\n     *\t\t\t\t\tWenn nichts anderes angegeben ist, dann gelten folgende zIndexe für die Kartendienste:\n     *\t\t\t\t\t10: gecacht\n     *\t\t\t\t\t20: gecacht - Kartendienst des Stadtmessungsamtes\n     *\t\t\t\t\t40: dynamisch\n     *\t\t\t\t\t50: dynamisch - Kartendienst des Stadtmessungsamtes\n     *\n     *\t\t\t\t\tBeispiel:\n     *\t\t\t\t\tmymap.addStmaBaseLayer(\"Grundkarte\");\n     *\t\t\t\t\tmymap.addStmaBaseLayer(\"Luftbild\");\n     *\n     *\t@argument\t\t_mapname {String} sprechende Bezeichnung des Kartendienstes\n     *\t\t\t\t\tFür ausgewählte Basiskartendienste kann hierüber über eine sprechende Bezeichnung der Kartendienst hinzugefügt werden.\n     *\t\t\t\t\tEventuelle Kartendienstnamenänderungen werden automatisch von der API berücksichtigt.\n     *\t\t\t\t\tDeswegen sollten die Basiskarten (Grundkarte, Luftbild, ..) immer über diese Funktion eingebundne werden.\n     *\n     *\t@argument\t\t_layerParams {object}\n     *\t\t\t\t\tzusätzliche Parameter für das OpenLayer-Layer-Objekt\n     *\t\t\t\t\tSiehe https://openlayers.org/en/v6.3.1/apidoc/module-ol_layer_Layer-Layer.html\n     *\n     *\t@argument\t\t_sourceParams {object}\n     *\t\t\t\t\tzusätzliche Parameter für das OpenLayer-Source-Objekt\n     *\t\t\t\t\tSiehe https://openlayers.org/en/v6.3.1/apidoc/module-ol_source_Source-Source.html\n     *\n     *\t@argument\t\t_callbackFunction {function}\n     *\t\t\t\t\tMöglichkeit, eine Funktion zu übergeben, die nach dem Hinzufügen des Layers ausgeführt wird.\n     *\t\t\t\t\tDer Funktion wird das jeweilige Layerobjekt übergeben.\n     *\n     *\t@returns\t\t{null} -\n     *\n     *\t@since\t\t\tv0.0\n     */\n    this.addStmaBaseLayer = function (\n      _mapname,\n      _layerParams,\n      _sourceParams,\n      _callbackFunction\n    ) {\n      var _self = this;\n\n      if (_getConfig().ags_services[_mapname] != null) {\n        _addEsriLayer(\n          'https://' +\n            _getConfig().ags_services[_mapname].ags_host +\n            '/' +\n            _getConfig().ags_services[_mapname].ags_instance +\n            '/rest/services/' +\n            _getConfig().ags_services[_mapname].ags_service +\n            '/MapServer',\n          _layerParams,\n          _sourceParams,\n          _callbackFunction\n        );\n      } else {\n        console.error(\"Karte '\" + _mapname + \"' nicht gefunden\");\n      }\n    };\n\n    /**\n     *\t@method\t\t\taddPoints\n     *\t@description\tfügt einzelne Punkte hinzu.\n     *\t\t\t\t\tWenn nichts anderes angegeben ist, dann gilt der zIndex 60.\n     *\n     *\t\t\t\t\tBeispiel:\n     *\t\t\t\t\tmymap.addPoints([[3513223, 5405026]], \"images/target.png\");\n     *\n     *\t@argument\t\t_pointCoords {Array} Array von Koordinatenpaaren\n     *\t\t\t\t\t[ [x,y], [x,y], ... ]\n     *\n     *\t@argument\t\t_imageURL {String} URL zu dem Bild des Punktes / Data-URL des Bildes\n     *\n     *\t@argument\t\t_callbackFunction {function}\n     *\t\t\t\t\tMöglichkeit, eine Funktion zu übergeben, die nach dem Hinzufügen des Layers ausgeführt wird.\n     *\t\t\t\t\tDer Funktion wird das jeweilige Layerobjekt übergeben.\n     *\n     *\t@returns\t\t{null} -\n     *\n     *\t@since\t\t\tv0.0\n     */\n    this.addPoints = function (_pointCoords, _imageURL, _callbackFunction) {\n      var features = [];\n      for (var i = 0; i < _pointCoords.length; i++) {\n        features.push(\n          new ol.Feature({\n            geometry: new ol.geom.Point(_pointCoords[i]),\n          })\n        );\n      }\n\n      var vectorLayer = new ol.layer.Vector({\n        zIndex: 60,\n        source: new ol.source.Vector({\n          features: features,\n        }),\n        style: new ol.style.Style({\n          image: new ol.style.Icon({\n            anchor: [0.5, 1],\n            src: _imageURL,\n          }),\n        }),\n      });\n      map.addLayer(vectorLayer);\n\n      //Callbackfunktion ausführen\n      if (typeof _callbackFunction == 'function') {\n        _callbackFunction(vectorLayer);\n      }\n    };\n\n    /**\n     *\t@method\t\t\taddStmaEsriFeatureLayer\n     *\t@description\tfügt einen Kartendienst eines ArcGIS Servers (dynamisch / gecacht) des Stadtmessungsamtes hinzu.\n     *\t\t\t\t\tWenn nichts anderes angegeben ist, dann gelten folgende zIndexe für die Kartendienste:\n     *\t\t\t\t\t10:\tgecacht\n     *\t\t\t\t\t20: gecacht - Kartendienst des Stadtmessungsamtes\n     *\t\t\t\t\t40: dynamisch\n     *\t\t\t\t\t50: dynamisch - Kartendienst des Stadtmessungsamtes\n     *\n     *\t\t\t\t\tBeispiel:\n     *\t\t\t\t\tmymap.addStmaEsriFeatureLayer(\"1_Base/Stadtkarte_Internet_c\");\n     *\n     *\t@argument\t\t_mapservice {String} Bezeichnung des Kartendienstes\n     *\t\t\t\t\tWenn die URL des Kartendienstes beispielsweise https://SERVER/ArcGIS/rest/services/ORDNER/KARTENDIENST/MapServer heißt,\n     *\t\t\t\t\tso sollte ORDNER/KARTENDIENST angegeben werden.\n     *\n     *\t@argument\t\t_layerId {Integer} LayerId im Kartendienst\n     *\t\t\t\t\tWenn die URL des Kartendienstes beispielsweise https://SERVER/ArcGIS/rest/services/ORDNER/KARTENDIENST/MapServer/LAYERID heißt,\n     *\t\t\t\t\tso sollte LAYERID angegeben werden.\n     *\n     *\t@argument\t\t_styleFunction {function}\n     *\t\t\t\t\tFunktion, wie die Objekte aussehen sollen. Der Funktion wird als 1. Parameter das feature-Objekt (ol.Feature) übergeben.\n     *\t\t\t\t\tMit Hilfe von z.B. feature.get('activeprod') könnte dann der Inhalt des Attributes 'activeprod' abgerufen werden und in Abhängigkeit\n     *\t\t\t\t\tvon ihm unterschiedliche Stile angegeben werden.\n     *\t\t\t\t\tRückgabe der Funktion muss ein ol.style.Style-Objekt sein.\n     *\t\t\t\t\tSiehe https://openlayers.org/en/v6.3.1/apidoc/module-ol_style_Style-Style.html\n     *\n     *\t@argument\t\t_callbackFunction {function}\n     *\t\t\t\t\tMöglichkeit, eine Funktion zu übergeben, die nach dem Hinzufügen des Layers ausgeführt wird.\n     *\t\t\t\t\tDer Funktion wird das jeweilige Layerobjekt übergeben.\n     *\n     *\t@returns\t\t{null} -\n     *\n     *\t@since\t\t\tv0.86\n     */\n    this.addStmaEsriFeatureLayer = function (\n      _mapservice,\n      _layerId,\n      _styleFunction,\n      _callbackFunction\n    ) {\n      var _self = this;\n\n      var _epsgCode = projection.replace('EPSG:', '');\n      console.warn('_epsgCode: ' + _epsgCode);\n\n      var _esrijsonFormat = new ol.format.EsriJSON();\n\n      var vectorSource = new ol.source.Vector({\n        loader: function (_extent, _resolution, _projection) {\n          var _url =\n            'https://' +\n            _getConfig().ags_host +\n            '/' +\n            _getConfig().ags_instance +\n            '/rest/services/' +\n            _mapservice +\n            '/MapServer/' +\n            _layerId +\n            '/query/';\n\n          var _urlParams = {\n            f: 'json',\n            returnGeometry: true,\n            spatialRel: 'esriSpatialRelIntersects',\n            geometry: encodeURIComponent(\n              '{\"xmin\":' +\n                _extent[0] +\n                ',\"ymin\":' +\n                _extent[1] +\n                ',\"xmax\":' +\n                _extent[2] +\n                ',\"ymax\":' +\n                _extent[3] +\n                ',\"spatialReference\":{\"wkid\":' +\n                _epsgCode +\n                '}}'\n            ),\n            geometryType: 'esriGeometryEnvelope',\n            inSR: _epsgCode,\n            outFields: '*',\n            outSR: _epsgCode,\n          };\n\n          $.ajax({\n            method: 'POST',\n            url: _url,\n            data: _urlParams,\n            dataType: 'jsonp',\n            success: function (_response) {\n              if (_response.error) {\n                alert(\n                  _response.error.message +\n                    '\\n' +\n                    _response.error.details.join('\\n')\n                );\n              } else {\n                var features = _esrijsonFormat.readFeatures(_response, {\n                  featureProjection: _projection,\n                });\n                if (features.length > 0) {\n                  vectorSource.addFeatures(features);\n                }\n              }\n            },\n          });\n        },\n        strategy: ol.loadingstrategy.tile(\n          ol.tilegrid.createXYZ({\n            tileSize: 512,\n          })\n        ),\n      });\n\n      var vectorLayer = new ol.layer.Vector({\n        zIndex: 60,\n        source: vectorSource,\n        style: _styleFunction,\n      });\n\n      map.addLayer(vectorLayer);\n\n      //Callbackfunktion ausführen\n      if (typeof _callbackFunction == 'function') {\n        _callbackFunction(vectorLayer);\n      }\n    };\n\n    /**\n     *\t@method\t\t\tgetMap\n     *\t@description\tgibt das OpenLayer-Map-Objekt zurück.\n     *\t\t\t\t\tSiehe https://openlayers.org/en/v6.3.1/apidoc/module-ol_Map-Map.html\n     *\n     *\t@returns\t\t{object} ol.Map\n     *\t\t\t\t\tSiehe https://openlayers.org/en/v6.3.1/apidoc/module-ol_Map-Map.html\n     *\n     *\t@since\t\t\tv0.0\n     */\n    this.getMap = function () {\n      return map;\n    };\n\n    /**\n     *\t@method\t\t\tgetConfig\n     *\t@description\tgibt die interne Konfiguration von geoline.ol.js zurück.\n     *\t\t\t\t\tDiese Funktion sollte nur sparsam genutzt werden, zum Beispiel zum Ermitteln der Konfiguration für die Offlineverfügbarkeit in Apps.\n     *\n     *\t@returns\t\t{object}\n     *\n     *\t@since\t\t\tv1.0\n     */\n    this.getConfig = function () {\n      return _getConfig();\n    };\n  }\n}\n"],"names":["projection","map","viewParams","config","tileLoadFunction","_getConfig","$","ajax","method","url","data","v","epsg","location","href","dataType","async","cache","success","_data","ags_hosts","ags_services","item","ags_host","error","xhr","status","console","_addEsriLayer","_url","_layerParams","_sourceParams","_callbackFunction","type","ags_info","warn","URL","jQuery","inArray","hostname","copyrightText","length","indexOf","_attributionControl","grep","getControls","getArray","_control","i","ol","control","Attribution","prototype","isPrototypeOf","setCollapsible","setCollapsed","currentVersion","spatialReference","latestWkid","wkid","singleFusedMapCache","_initCachedLayer","_initDynamicLayer","e","resolutions","each","tileInfo","lods","lod","push","resolution","tileGrid","tilegrid","TileGrid","origin","x","y","extent","fullExtent","xmin","ymin","xmax","ymax","minZoom","tileSize","rows","cols","getView","getProjection","getCode","extend","setView","View","sourceParams","predefinedSourceParams","proj","get","attributions","_zIndex","layerParams","zIndex","predefinedLayerParams","source","XYZ","layer","Tile","addLayer","params","layers","ratio","html","ImageArcGISRest","Image","this","initMap","_epsgCode","_mapParams","_viewParams","_customParams","addProjection","Projection","code","units","mapParams","target","controls","defaults","attribution","attributionOptions","tipLabel","logo","pixelRatio","loadTilesWhileAnimating","loadTilesWhileInteracting","_attributionControlAvailable","forEach","center","zoom","Map","on","preventDefault","updateSize","addEsriLayer","addStmaEsriLayer","_mapservice","ags_instance","addStmaBaseLayer","_mapname","ags_service","addPoints","_pointCoords","_imageURL","features","Feature","geometry","geom","Point","vectorLayer","Vector","style","Style","image","Icon","anchor","src","addStmaEsriFeatureLayer","_layerId","_styleFunction","replace","_esrijsonFormat","format","EsriJSON","vectorSource","loader","_extent","_resolution","_projection","_urlParams","f","returnGeometry","spatialRel","encodeURIComponent","geometryType","inSR","outFields","outSR","_response","alert","message","details","join","readFeatures","featureProjection","addFeatures","strategy","loadingstrategy","tile","createXYZ","getMap","getConfig"],"mappings":"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"}